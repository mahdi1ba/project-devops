# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master
pool:
  vmImage: ubuntu-latest

steps:
  - script: echo K8S Terraform Azure!
    displayName: 'Run a one-line script'

  - task: DownloadSecureFile@1
    name: publickey
    inputs:
      secureFile: 'azure_rsa.pub'

  - task: TerraformCLI@0
    inputs:
      command: 'init'
      workingDirectory: '$(System.DefaultWorkingDirectory)/configuration/iaac/azure/kubernetes'
      #commandOptions: '-var client_id=$(client_id) -var client_secret=$(client_secret) -var ssh_public_key=$(publickey.secureFilePath)'
      backendType: 'azurerm'
      backendServiceArm: 'azure-resource-manger-service-connection'
      ensureBackend: true
      backendAzureRmResourceGroupName: 'terraform-backend-rg'
      backendAzureRmResourceGroupLocation: 'westeurope'
      backendAzureRmStorageAccountName: 'storageacctmahdixyz'
      backendAzureRmContainerName: 'storageacctmahdicontainer'
      backendAzureRmKey: 'kubernetes-dev1.tfstate'
      allowTelemetryCollection: true


  - task: TerraformCLI@0
    inputs:
      command: 'import'
      environmentServiceName: 'azure-resource-manger-service-connection'
      allowTelemetryCollection: true
      resourceId: '/subscriptions/ed44c9a4-fb65-4eb2-a5f8-0b72dbdbe271/resourceGroups/kubernetes_dev'
  - task: TerraformCLI@0
    inputs:
      command: 'apply'
      workingDirectory: '$(System.DefaultWorkingDirectory)/configuration/iaac/azure/kubernetes'
      environmentServiceName: 'azure-resource-manger-service-connection'
      commandOptions: '-var client_id=$(client_id) -var client_secret=$(client_secret) -var ssh_public_key=$(publickey.secureFilePath)'
  